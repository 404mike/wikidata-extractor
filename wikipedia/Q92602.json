{"wiki_id": "http://www.wikidata.org/entity/Q92602", "itemLabel": "Tony Hoare", "itemDescription": "British computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Tony_Hoare", "wikipedia_page": {"main": "Sir Charles Antony Richard Hoare (Tony Hoare or C. A. R. Hoare)  (born 11 January 1934) is a British computer scientist who has made foundational contributions to programming languages, algorithms, operating systems, formal verification, and concurrent computing. His work earned him the Turing Award, usually regarded as the highest distinction in computer science, in 1980.\nHoare developed the sorting algorithm quicksort in 1959\u20131960. He developed Hoare logic, an axiomatic basis for verifying program correctness. In the semantics of concurrency, he introduced the formal language communicating sequential processes (CSP) to specify the interactions of concurrent processes, and along with Edsger Dijkstra, formulated the dining philosophers problem. He is also credited with development (and later criticism) of the null pointer, having introduced it in the ALGOL family of languages. Since 1977, he has held positions at the University of Oxford and Microsoft Research in Cambridge.\n\n", "link_mentions": [{"page": "ALGOL", "response": ["ALGOL 60 inspired many languages that followed it. Tony Hoare remarked: \"Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.\"\"Hints on Programming Language Design\" , C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to Edsger W. Dijkstra, also involved in implementing the first ALGOL 60 compiler.) The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording \"Revised Report on the Algorithmic Language Scheme\" for its standards documents in homage to ALGOL."]}, {"page": "Computer science", "response": ["Proponents of classifying computer science as a mathematical discipline argue that computer programs are physical realizations of mathematical entities and programs can be deductively reasoned through mathematical formal methods. Computer scientists Edsger W. Dijkstra and Tony Hoare regard instructions for computer programs as mathematical sentences and interpret formal semantics for programming languages as mathematical axiomatic systems."]}, {"page": "Edsger W. Dijkstra", "response": ["Dijkstra's thesis was that departures from linear control flow were clearer if allowed only in disciplined higher-level structures such as the if-then-else statement and the while loop. This methodology was developed into structured programming movement, the title of his 1972 book, coauthored with Tony Hoare and Ole-Johan Dahl. Considered by many as the first significant movement in the history of computer programming, structured programming became the new programming orthodoxy during the 1970s.Mills, Harlan D. (1986). Structured Programming: Retrospect and Prospect. (IEEE Software 3(6): 58\u201366, November 1986).", "The dining philosophers problem is an example problem often used in concurrent algorithm design to illustrate synchronization issues and techniques for resolving them. It was originally formulated in 1965 by Dijkstra as a student exam exercise, presented in terms of computers competing for access to tape drive peripherals. Soon after, Tony Hoare gave the problem its present formulation. The sleeping barber problem is also attributed to Dijkstra.", "In the words of Sir Tony Hoare, FRS, delivered by him at Dijkstra's funeral:", "The Department of Computer Science (UTCS) at the University of Texas at Austin hosted the inaugural Edsger W. Dijkstra Memorial Lecture on 12 October 2010. Tony Hoare, Emeritus Professor at Oxford and Principal Researcher at Microsoft Research, was the speaker for the event. This lecture series was made possible by a generous grant from Schlumberger to honor the memory of Dijkstra."]}, {"page": "Occam (programming language)", "response": ["occam is an imperative procedural language (such as Pascal). It was developed by David May and others at Inmos (trademark INMOS), advised by Tony Hoare, as the native programming language for their transputer microprocessors, but implementations for other platforms are available. The most widely known version is occam 2; its programming manual was written by Steven Ericsson-Zenith and others at Inmos.", "occam 1 (released 1983) was a preliminary version of the language which borrowed from David May's work on EPL and Tony Hoare's CSP. This supported only the VAR data type, which was an integral type corresponding to the native word length of the target architecture, and arrays of only one dimension."]}, {"page": "Pascal (programming language)", "response": ["By this time, a number of problems in ALGOL had been identified, notably the lack of a standardized string system. The group tasked with maintaining the language had begun the ALGOL X process to identify improvements, calling for submissions. Wirth and Tony Hoare submitted a conservative set of modifications to add strings and clean up some of the syntax. These were considered too minor to be worth using as the new standard ALGOL, so Wirth wrote a compiler for the language, which became named ALGOL W."]}, {"page": "Structured programming", "response": ["The structured program theorem provides the theoretical basis of structured programming. It states that three ways of combining programs\u2014sequencing, selection, and iteration\u2014are sufficient to express any computable function. This observation did not originate with the structured programming movement; these structures are sufficient to describe the instruction cycle of a central processing unit, as well as the operation of a Turing machine. Therefore, a processor is always executing a \"structured program\" in this sense, even if the instructions it reads from memory are not part of a structured program. However, authors usually credit the result to a 1966 paper by B\u00f6hm and Jacopini, possibly because Dijkstra cited this paper himself. The structured program theorem does not address how to write and analyze a usefully structured program. These issues were addressed during the late 1960s and early 1970s, with major contributions by Dijkstra, Robert W. Floyd, Tony Hoare, Ole-Johan Dahl, and David Gries."]}, {"page": "Turing Award", "response": ["|Tony Hoare"]}, {"page": "University of Oxford", "response": ["Three Oxford mathematicians, Michael Atiyah, Daniel Quillen and Simon Donaldson, have won Fields Medals, often called the \"Nobel Prize for mathematics\". Andrew Wiles, who proved Fermat's Last Theorem, was educated at Oxford and is currently the Regius Professor and Royal Society Research Professor in Mathematics at Oxford. Marcus du Sautoy and Roger Penrose are both currently mathematics professors, and Jackie Stedall was a professor of the university. Stephen Wolfram, chief designer of Mathematica and Wolfram Alpha studied at the university, along with Tim Berners-Lee, inventor of the World Wide Web, Edgar F. Codd, inventor of the relational model of data, and Tony Hoare, programming languages pioneer and inventor of Quicksort."]}, {"page": "1960s", "response": ["* 1960 \u2013 Tony Hoare announces the Quicksort algorithm, the most common sorter on computers."]}, {"page": "Denotational semantics", "response": ["Denotational semantics has been developed for modern programming languages that use capabilities like concurrency and exceptions, e.g., Concurrent ML,John Reppy \"Concurrent ML: Design, Application and Semantics\" in Springer-Verlag, Lecture Notes in Computer Science, Vol. 693. 1993 CSP,A. W. Roscoe. \"The Theory and Practice of Concurrency\" Prentice-Hall. Revised 2005. and Haskell.Simon Peyton Jones, Alastair Reid, Fergus Henderson, Tony Hoare, and Simon Marlow. \"A semantics for imprecise exceptions\" Conference on Programming Language Design and Implementation. 1999. The semantics of these languages is compositional in that the meaning of a phrase depends on the meanings of its subphrases. For example, the meaning of the applicative expression f(E1,E2) is defined in terms of semantics of its subphrases f, E1 and E2.  In a modern programming language, E1 and E2 can be evaluated concurrently and the execution of one of them might affect the other by interacting through shared objects causing their meanings to be defined in terms of each other.  Also, E1 or E2 might throw an exception which could terminate the execution of the other one. The sections below describe special cases of the semantics of these modern programming languages."]}, {"page": "Exception handling", "response": ["Tony Hoare in 1980 described the Ada programming language as having \"...a plethora of features and notational conventions, many of them unnecessary and some of them, like exception handling, even dangerous. [...] Do not allow this language in its present state to be used in applications where reliability is critical [...]. The next rocket to go astray as a result of a programming language error may not be an exploratory space rocket on a harmless trip to Venus: It may be a nuclear warhead exploding over one of our own cities.\"C.A.R. Hoare. \"The Emperor's Old Clothes\". 1980 Turing Award Lecture"]}]}}