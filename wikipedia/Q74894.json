{"wiki_id": "http://www.wikidata.org/entity/Q74894", "itemLabel": "Martin Fowler", "itemDescription": "British programmer", "wikipedia_url": "https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer)", "wikipedia_page": {"main": "Martin Fowler (18 December 1963) is an American-resident British software developer, author and international public speaker on software development, specialising in object-oriented analysis and design, UML, patterns, and agile software development methodologies, including extreme programming.\nHis 1999 book Refactoring popularised the practice of code refactoring. In 2004 he introduced Presentation Model (PM), an architectural pattern.", "link_mentions": [{"page": "List of computer scientists", "response": ["* Martin Fowler"]}, {"page": "Code coverage", "response": ["Martin Fowler writes: \"I would be suspicious of anything like 100% - it would smell of someone writing tests to make the coverage numbers happy, but not thinking about what they are doing\".Martin Fowler's blog: TestCoverage. Last accessed: 2017-11-17"]}, {"page": "List of programmers", "response": ["*Martin Fowler \u2013 created Dependency Injection pattern of software engineering, a form of Inversion of control"]}, {"page": "Kent Beck", "response": ["* 2000. Planning Extreme Programming. With Martin Fowler. Addison-Wesley. ()"]}, {"page": "Code refactoring", "response": ["Here are some examples of micro-refactorings; some of these may only apply to certain languages or language types. A longer list can be found in Martin Fowler's refactoring book and website.(these are only about OOP however).Refactoring techniques in Fowler's refactoring Website Many development environments provide automated support for these micro-refactorings. For instance, a programmer could click on the name of a variable and then select the \"Encapsulate field\" refactoring from a context menu. The IDE would then prompt for additional details, typically with sensible defaults and a preview of the code changes. After confirmation by the programmer it would carry out the required changes throughout the code.", "Martin Fowler's book Refactoring: Improving the Design of Existing Code is the canonical reference. ", "*Martin Fowler's homepage about refactoring"]}, {"page": "Structured programming", "response": ["Kent Beck, Martin Fowler and co-authors have argued in their refactoring books that nested conditionals may be harder to understand than a certain type of flatter structure using multiple exits predicated by guard clauses. Their 2009 book flatly states that \"one exit point is really not a useful rule. Clarity is the key principle: If the method is clearer with one exit point, use one exit point; otherwise don\u2019t\". They offer a cookbook solution for transforming a function consisting only of nested conditionals into a sequence of guarded return (or throw) statements, followed by a single unguarded block, which is intended to contain the code for the common case, while the guarded statements are supposed to deal with the less common ones (or with errors). Herb Sutter and Andrei Alexandrescu also argue in their 2004 C++ tips book that the single-exit point is an obsolete requirement."]}, {"page": "Exception handling", "response": ["Kiniry writes that \"As any Java programmer knows, the volume of try catch code in a typical Java application is sometimes larger than the comparable code necessary for explicit formal parameter and return value checking in other languages that do not have checked exceptions. In fact, the general consensus among in-the-trenches Java programmers is that dealing with checked exceptions is nearly as unpleasant a task as writing documentation. Thus, many programmers report that they \u201cresent\u201d checked exceptions.\". Martin Fowler has written \"...on the whole I think that exceptions are good, but Java checked exceptions are more trouble than they are worth.\" As of 2006 no major programming language has followed Java in adding checked exceptions. For example, C# does not require declaration of any exception type. The developers of C# apparently were influenced by the poor reception of Java's checked exceptions, with the following quote being attributed to them (via Eric Gunnerson):  "]}, {"page": "Closure (computer programming)", "response": ["*Closures: An article about closures in dynamically typed imperative languages, by Martin Fowler.", "*Collection closure methods: An example of a technical domain where using closures is convenient, by Martin Fowler."]}, {"page": "Software design pattern", "response": ["The documentation for a design pattern describes the context in which the pattern is used, the forces within the context that the pattern seeks to resolve, and the suggested solution. There is no single, standard format for documenting design patterns. Rather, a variety of different formats have been used by different pattern authors. However, according to Martin Fowler, certain pattern forms have become more well-known than others, and consequently become common starting points for new pattern-writing efforts. One example of a commonly used documentation format is the one used by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides in their book Design Patterns. It contains the following sections:"]}, {"page": "Code smell", "response": ["The term was popularised by Kent Beck on WardsWiki in the late 1990s. Usage of the term increased after it was featured in the 1999 book Refactoring: Improving the Design of Existing Code by Martin Fowler."]}]}}