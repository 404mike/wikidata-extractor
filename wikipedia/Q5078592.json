{"wiki_id": "http://www.wikidata.org/entity/Q5078592", "itemLabel": "Charles H. Lindsey", "itemDescription": "British Computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Charles_H._Lindsey", "wikipedia_page": {"main": "Charles Hodgson Lindsey is a British computer scientist, most known for his involvement with the programming language ALGOL 68.\nHe was an editor of the Revised Report on Algol 68, and co-wrote a ground breaking book on the language An Informal Introduction to Algol 68, which was unusual because it was written so that it could be read horizontally (i.e., serially, in the normal manner) or vertically (i.e., starting with section 1.1, then 2.1, then 3.1, etc., before going back to section 1.2, then 2.2, and so on) depending on how a reader wanted to learn the language.\nHe was responsible for the research implementation of ALGOL 68 for the experimental MU5 computer at Manchester University, and still maintains an implementation of a subset named ALGOL 68S.\nHe wrote the complete History of ALGOL 68 in:\nLindsey, C. H. (1996). \"A History of ALGOL 68\".  In Bergin, T. J.; Gibson, R. G. (eds.). History of Programming Languages-II. ACM Press. ISBN 0-201-89502-1.\nHe was involved with developing international standards in programming and informatics, as a member of the International Federation for Information Processing (IFIP) IFIP Working Group 2.1 on Algorithmic Languages and Calculi, which specified, maintains, and supports the programming languages ALGOL 60 and ALGOL 68.He is a member of the Computer Conservation Society, North West Branch, and part of the team restoring Douglas Hartree's Differential Analyser at Manchester Museum of Science and Technology.", "link_mentions": [{"page": "List of computer scientists", "response": ["* Charles H. Lindsey \u2013 IFIP WG 2.1 member, Revised Report on ALGOL 68"]}, {"page": "List of programmers", "response": ["*Charles H. Lindsey \u2013 IFIP WG 2.1 member, Revised Report on ALGOL 68"]}, {"page": "ALGOL 68", "response": ["A draft report was finally published in February 1968. This was met by \"shock, horror and dissent\", mostly due to the hundreds of pages of unreadable grammar and odd terminology. Charles H. Lindsey attempted to figure out what \"language was hidden inside of it\", a process that took six man-weeks of effort. The resulting paper, \"ALGOL 68 with fewer tears\", was widely circulated. At a wider information processing meeting in Zurich in May 1968, attendees complained that the language was being forced upon them and that IFIP was \"the true villain of this unreasonable situation\" as the meetings were mostly closed and there was no formal feedback mechanism. Wirth and Peter Naur formally resigned their authorship positions in WG2.1 at that time.", "|May 1997 || Algol68 S(S) published on the internetAlgol68 S(S) published on the internet || Charles H. Lindsey", "* other WG 2.1 members active in ALGOL 68 design: Friedrich L. Bauer \u2022 Hans Bekic \u2022 Gerhard Goos \u2022 Peter Zilahy Ingerman \u2022 Peter Landin \u2022 Charles H. Lindsey  \u2022 John McCarthy \u2022 Jack Merner \u2022 Peter Naur \u2022 Manfred Paul \u2022 Willem van der Poel \u2022 Doug Ross \u2022 Klaus Samelson \u2022 Michel Sintzoff \u2022 Niklaus Wirth \u2022 Nobuo Yoneda."]}, {"page": "ALGOL 68S", "response": ["Charles H. Lindsey created another implementation of ALGOL 68, named ALGOL 68S, for Sun-3, Sun SPARC (under SunOS 4.1), Sun SPARC (under Solaris 2), Atari ST (under GEMDOS) and Acorn Archimedes (under RISC OS), c.f. "]}, {"page": "Man or boy test", "response": ["This creates a tree of B call frames that refer to each other and to the containing A call frames, each of which has its own copy of k that changes every time the associated B is called. Trying to work it through on paper is probably fruitless, but for k\u00a0=\u00a010, the correct answer is \u221267, despite the fact that in the original article Knuth conjectured it to be \u2212121. The survey article by Charles H. Lindsey mentioned in the references contains a table for different starting values. Even modern machines quickly run out of stack space for larger values of k, which are tabulated below ().See \"Performance and Memory\" on the Rosetta Code \"Man or Boy Page\"."]}]}}