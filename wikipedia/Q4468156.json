{"wiki_id": "http://www.wikidata.org/entity/Q4468156", "itemLabel": "David Turner", "itemDescription": "British computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/David_Turner_(computer_scientist)", "wikipedia_page": {"main": "David A. Turner (born 26 January 1946) is a British computer scientist. He is best known for designing and implementing three programming languages, including the first for functional programming based on lazy evaluation, combinator graph reduction, and polymorphic types: SASL (1972), Kent Recursive Calculator (KRC) (1981), and the commercially supported Miranda (1985). Miranda had a strong influence on the later Haskell.He has a Doctor of Philosophy (D.Phil.) from the University of Oxford. He has held professorships at Queen Mary College, London, University of Texas at Austin and the University of Kent at Canterbury, where he has spent most of his career and retains the title of Emeritus Professor of Computation.\nHe was involved with developing international standards in programming and informatics, as a member of the International Federation for Information Processing (IFIP) IFIP Working Group 2.1 on Algorithmic Languages and Calculi, which specified, maintains, and supports the programming languages ALGOL 60 and ALGOL 68.He is also an Emeritus Professor at Middlesex University, England.\n\n", "link_mentions": [{"page": "List of computer scientists", "response": ["* David Turner \u2013 SASL, Kent Recursive Calculator, Miranda, IFIP WG 2.1 member"]}, {"page": "Functional programming", "response": ["The 1973 language ML was created by Robin Milner at the University of Edinburgh, and David Turner developed the language SASL at the University of St Andrews. Also in Edinburgh in the 1970s, Burstall and Darlington developed the functional language NPL.R.M. Burstall. Design considerations for a functional programming language. Invited paper, Proc. Infotech State of the Art Conf. \"The Software Revolution\", Copenhagen, 45\u201357 (1977) NPL was based on Kleene Recursion Equations and was first introduced in their work on program transformation.R.M. Burstall and J. Darlington. A transformation system for developing recursive programs. Journal of the Association for Computing Machinery 24(1):44\u201367 (1977) Burstall, MacQueen and Sannella then incorporated the polymorphic type checking from ML to produce the language Hope.R.M. Burstall, D.B. MacQueen and D.T. Sannella. HOPE: an experimental applicative language. Proc. 1980 LISP Conference, Stanford, 136\u2013143 (1980). ML eventually developed into several dialects, the most common of which are now OCaml and Standard ML.", "The lazy functional language, Miranda, developed by David Turner, initially appeared in 1985 and had a strong influence on Haskell. With Miranda being proprietary, Haskell began with a consensus in 1987 to form an open standard for functional programming research; implementation releases have been ongoing since 1990."]}, {"page": "List of programmers", "response": ["*David Turner \u2013 SASL, Kent Recursive Calculator, Miranda, IFIP WG 2.1 member"]}, {"page": "Kent Recursive Calculator", "response": ["KRC (Kent Recursive Calculator) is a lazy functional language developed by David Turner from November 1979 to October 1981Dates in the commentary to the BCPL KRC source code for EMAS. based on SASL, with pattern matching, guards and ZF expressions (now more usually called list comprehensions).", "Two implementations of KRC were written: David Turner's original one in BCPL running on EMAS, and Simon J. Croft's later one in C under Unix, and KRC was the main language used for teaching functional programming at the University of Kent at Canterbury (UK) from 1982 to 1985."]}, {"page": "Timeline of programming languages", "response": ["| David Turner at University of Kent"]}, {"page": "Sieve of Eratosthenes", "response": ["When testing each prime, the optimal trial division algorithm uses all prime numbers not exceeding its square root, whereas the sieve of Eratosthenes produces each composite from its prime factors only, and gets the primes \"for free\", between the composites. The widely known 1975 functional sieve code by David TurnerTurner, David A. SASL language manual. Tech. rept. CS/75/1. Department of Computational Science, University of St. Andrews 1975. (primes = sieve [2..]; sieve (p:nos) = p:sieve (remove (multsof p) nos); remove m = filter (not . m); multsof p n = rem n p==0). But see also Peter Henderson, Morris, James Jr., A Lazy Evaluator, 1976, where we find the following, attributed to P. Quarendon: primeswrt[x;l] = if car[l] mod x=0 then primeswrt[x;cdr[l]] else cons[car[l];primeswrt[x;cdr[l]]] ; primes[l] = cons[car[l];primes[primeswrt[car[l];cdr[l]]]] ; primes[integers[2]]; the priority is unclear. is often presented as an example of the sieve of Eratosthenes but is actually a sub-optimal trial division sieve."]}, {"page": "Miranda (programming language)", "response": ["Miranda is a lazy, purely functional programming language designed by David Turner as a successor to his earlier programming languages SASL and KRC, using some concepts from ML and Hope.  It was produced by Research Software Ltd. of England (which holds a trademark on the name Miranda) and was the first purely functional language to be commercially supported."]}, {"page": "Combinatory logic", "response": ["These combinators are extremely useful when translating predicate logic or lambda calculus into combinator expressions. They were also used by Curry, and much later by David Turner, whose name has been associated with their computational use. Using them, we can extend the rules for the transformation as follows:", "David Turner used his combinators to implement the SASL programming language."]}, {"page": "List comprehension", "response": ["The first use of the term \"comprehension\" for such constructs was in Rod Burstall and John Darlington's description of their functional programming language NPL from 1977. In his retrospective \"Some History of Functional Programming Languages\", David Turner recalls:"]}, {"page": "Queen Mary University of London", "response": ["*David Turner \u2013 British computer scientist"]}, {"page": "Graph reduction", "response": ["The concept of a graph reduction that allows evaluated values to be shared was first developed by Chris Wadsworth in his 1971 Ph.D. dissertation. This dissertation was cited by Peter Henderson and James H. Morris Jr. in 1976 paper, \u201cA lazy evaluator\u201dA lazy evaluator that introduced the notion of lazy evaluation. In 1976 David Turner incorporated lazy evaluation into SASL using combinators."]}]}}