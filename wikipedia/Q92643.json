{"wiki_id": "http://www.wikidata.org/entity/Q92643", "itemLabel": "Robin Milner", "itemDescription": "British computer scientist (1934-2010)", "wikipedia_url": "https://en.wikipedia.org/wiki/Robin_Milner", "wikipedia_page": {"main": "Arthur John Robin Gorell Milner  (13 January 1934 \u2013 20 March 2010), known as Robin Milner or A. J. R. G. Milner, was a British computer scientist, and a Turing Award winner.", "link_mentions": [{"page": "List of computer scientists", "response": ["* Robin Milner \u2013 ML (programming language)"]}, {"page": "Functional programming", "response": ["The 1973 language ML was created by Robin Milner at the University of Edinburgh, and David Turner developed the language SASL at the University of St Andrews. Also in Edinburgh in the 1970s, Burstall and Darlington developed the functional language NPL.R.M. Burstall. Design considerations for a functional programming language. Invited paper, Proc. Infotech State of the Art Conf. \"The Software Revolution\", Copenhagen, 45\u201357 (1977) NPL was based on Kleene Recursion Equations and was first introduced in their work on program transformation.R.M. Burstall and J. Darlington. A transformation system for developing recursive programs. Journal of the Association for Computing Machinery 24(1):44\u201367 (1977) Burstall, MacQueen and Sannella then incorporated the polymorphic type checking from ML to produce the language Hope.R.M. Burstall, D.B. MacQueen and D.T. Sannella. HOPE: an experimental applicative language. Proc. 1980 LISP Conference, Stanford, 136\u2013143 (1980). ML eventually developed into several dialects, the most common of which are now OCaml and Standard ML."]}, {"page": "ML (programming language)", "response": ["ML (Meta Language) is a general-purpose functional programming language. It is known for its use of the polymorphic Hindley\u2013Milner type system, which automatically assigns the types of most expressions without requiring explicit type annotations, and ensures type safetythere is a formal proof that a well-typed ML program does not cause runtime type errors.Robin Milner. A theory of type polymorphism in programming. Journal of Computer and System Sciences, 17(3):348\u2013375, 1978. ML provides pattern matching for function arguments, garbage collection, imperative programming, call-by-value and currying. It is used heavily in programming language research and is one of the few languages to be completely specified and verified using formal semantics. Its types and pattern matching make it well-suited and commonly used to operate on other formal languages, such as in compiler writing, automated theorem proving, and formal verification.", "ML was developed by Robin Milner and others in the early 1970s at the University of Edinburgh, and its syntax is inspired by ISWIM. Historically, ML was conceived to develop proof tactics in the LCF theorem prover (whose language, pplambda, a combination of the first-order predicate calculus and the simply-typed polymorphic lambda calculus, had ML as its metalanguage).", "* The Definition of Standard ML, Robin Milner, Mads Tofte, Robert Harper, MIT Press 1990; (revised edition adds author David MacQueen), MIT Press 1997, .", "* Commentary on Standard ML, Robin Milner, Mads Tofte, MIT Press 1997, ."]}, {"page": "Timeline of programming languages", "response": ["| Robin Milner"]}, {"page": "Turing Award", "response": ["|Robin Milner"]}, {"page": "Logic for Computable Functions", "response": ["Logic for Computable Functions (LCF) is an interactive automated theorem prover developed at Stanford and Edinburgh by Robin Milner and collaborators in early 1970s, based on the theoretical foundation of logic of computable functions previously proposed by Dana Scott. Work on the LCF system introduced the general-purpose programming language ML to allow users to write theorem-proving tactics, supporting algebraic data types, parametric polymorphism, abstract data types, and exceptions. "]}, {"page": "Communicating sequential processes", "response": ["Following the publication of the original version of CSP, Hoare, Stephen Brookes, and A. W. Roscoe developed and refined the theory of CSP into its modern, process algebraic form. The approach taken in developing CSP into a process algebra was influenced by Robin Milner's work on the Calculus of Communicating Systems (CCS) and conversely. The theoretical version of CSP was initially presented in a 1984 article by Brookes, Hoare, and Roscoe, and later in Hoare's book Communicating Sequential Processes, which was published in 1985. In September 2006, that book was still the third-most cited computer science reference of all time according to Citeseer (albeit an unreliable source due to the nature of its sampling). The theory of CSP has undergone a few minor changes since the publication of Hoare's book. Most of these changes were motivated by the advent of automated tools for CSP process analysis and verification. Roscoe's The Theory and Practice of Concurrency describes this newer version of CSP."]}, {"page": "Type inference", "response": ["In 1978 Robin Milner, independently of Hindley's work, provided an equivalent algorithm, Algorithm W."]}]}}