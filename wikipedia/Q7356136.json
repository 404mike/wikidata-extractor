{"wiki_id": "http://www.wikidata.org/entity/Q7356136", "itemLabel": "Rod Burstall", "itemDescription": "computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Rod_Burstall", "wikipedia_page": {"main": "Rodney Martineau \"Rod\" Burstall FRSE (born 1934) is a British computer scientist and one of four founders of the Laboratory for Foundations of Computer Science at the University of Edinburgh.", "link_mentions": [{"page": "Timeline of programming languages", "response": ["| Rod Burstall, Robin Popplestone", "| Rod Burstall, Robin Popplestone"]}, {"page": "COWSEL", "response": ["COWSEL was initially implemented on a Ferranti Pegasus computer at the University of Leeds and on a Stantec Zebra at the Bradford Institute of Technology; later, Rod Burstall implemented it on an Elliot 4120 at the University of Edinburgh."]}, {"page": "List comprehension", "response": ["The first use of the term \"comprehension\" for such constructs was in Rod Burstall and John Darlington's description of their functional programming language NPL from 1977. In his retrospective \"Some History of Functional Programming Languages\", David Turner recalls:"]}, {"page": "School of Informatics, University of Edinburgh", "response": ["* Rod Burstall , retired emeritus"]}, {"page": "Hope (programming language)", "response": ["It predates Miranda and Haskell and is contemporaneous with ML, also developed at the University. Hope was derived from NPL, a simple functional language developed by Rod Burstall and John Darlington in their work on program transformation.R.M. Burstall and J. Darlington. A transformation system for developing recursive programs. Journal of the Association for Computing Machinery, 24(1):44\u201367 (1977) NPL and Hope are notable for being the first languages with call-by-pattern evaluation and algebraic data types."]}, {"page": "NPL (programming language)", "response": ["NPL is a functional programming language with pattern matching designed by Rod Burstall and John Darlington in 1977. The language allows certain sets and logic constructs to appear on the right hand side of definitions, e.g."]}, {"page": "POP-2", "response": ["POP-2 (also referred to as POP2) is a programming language developed around 1970 from the earlier language POP-1 (developed by Robin Popplestone in 1968, originally named COWSEL) by Robin Popplestone and Rod Burstall at the University of Edinburgh. It drew roots from many sources: the languages LISP and ALGOL 60, and theoretical ideas from Peter J. Landin. It used an incremental compiler, which gave it some of the flexibility of an interpreted language, including allowing new function definitions at run time and modification of function definitions while a program was running (both of which are features of dynamic compilation), without the overhead of an interpreted language."]}, {"page": "SIGPLAN", "response": ["* 2009: Rod Burstall"]}, {"page": "Joseph Goguen", "response": ["In the early 1990s Goguen and Rod Burstall developed the theory of institutions, a category-theoretic description of logical systems in computer science.J. A. Goguen and R. M. Burstall, \"Institutions: Abstract Model Theory for Specification and Programming\", Journal of the ACM 39: 95\u2013146 (1992). Institution theory impacted the development of universal logic and became one of its most studied aspects.R\u0103zvan Diaconesc, \"From Universal Logic to Computer Science, and Back\" in Theoretical Aspects of Computing (ICTAC '14), Lecture Notes in Computer Science 8687, Springer, pp. 1\u201316 (2014). The term \"Carnapian Goguenism\" is used to refer to the application of institutions to ontologies.Oliver Kutz, Till Mossakowski, and Dominik L\u00fccke, \"Carnap, Goguen, and the Hyperontologies\" Logica Universalis 4 (2): 255\u2013333 (2010)."]}, {"page": "Institution (computer science)", "response": ["The notion of institution was created by Joseph Goguen and Rod Burstall in the late 1970s, in order to deal with the  \"population explosion among the logical systems used in computer science\". The notion attempts to \"formalize the informal\" concept of logical system."]}, {"page": "Michael J. C. Gordon", "response": ["Gordon studied for his PhD degree at University of Edinburgh, supervised by Rod Burstall, finishing in 1973 with a thesis entitled Evaluation and Denotation of Pure LISP Programs. He was invited to Stanford University in California by John McCarthy, the inventor of LISP, to work in his Artificial Intelligence Laboratory there. Gordon worked at the Cambridge University Computer Laboratory from 1981, initially as a lecturer, promoted to Reader in 1988 and Professor in 1996."]}, {"page": "Gordon Plotkin", "response": ["Plotkin was educated at the University of Glasgow and the University of Edinburgh, gaining his Bachelor of Science degree in 1967 and PhD in 1972  supervised by Rod Burstall."]}, {"page": "Separation logic", "response": ["It was developed by John C. Reynolds, Peter O'Hearn, Samin Ishtiaq and Hongseok Yang, drawing upon early work by Rod Burstall. The assertion language of separation logic is a special case of the logic of bunched implications (BI). A CACM review article by O'Hearn charts developments in the subject to early 2019."]}, {"page": "Category of relations", "response": ["David Rydeheard and Rod Burstall consider Rel to have objects that are homogeneous relations. For example, A is a set and R \u2286 A \u00d7 A is a binary relation on A. The morphisms of this category are functions between sets that preserve a relation: Say S \u2286 B \u00d7 B is a second relation and f: A \u2192 B is a function such that xRy \\implies f(x)Sf(y), then f is a morphism.David Rydeheard & Rod Burstall (1988) Computational Category Theory, page 41, Prentice-Hall "]}, {"page": "Rodney Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "Rodney M Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "Rodney M. Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "Rodney Martineau Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "R M Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "R. M. Burstall", "response": ["#REDIRECT Rod Burstall"]}, {"page": "Alan Mycroft", "response": ["Mycroft read mathematics at Cambridge then moved to Edinburgh where he completed his Doctor of Philosophy degree with a thesis on Abstract interpretation and optimising transformations for applicative programs supervised by Rod Burstall and Robin Milner."]}, {"page": "Burstall (surname)", "response": ["*Rod Burstall (born 1934), British computer scientist "]}, {"page": "Thorsten Altenkirch", "response": ["Altenkirch obtained his PhD from the University of Edinburgh in 1993 under Rod Burstall."]}, {"page": "John Darlington", "response": ["Darlington is known for early work he did on program transformation and functional programming. In his thesis in 1972 Darlington introduced the idea of program transformation, i.e. manipulating programs into alternative forms, preserving their semantics while altering their operational characteristics In subsequent work with his supervisor, Rod Burstall, Darlington developed the unfold/fold calculus for program transformation This system of six rewrite rules has become classic and forms the basis of a great deal of work in many areas that continues to this day. From this work Burstall and Darlington introduced a novel functional language, NPL, based on Kleene Recursion Equations that made an early contribution to the development of the multi-equational, pattern matching style of pure functional programmingDesign considerations for a functional programming language. R. M. Burstall. Infotech State of the Art Conference: The Software Revolution, Copenhagen, October, 1977"]}]}}