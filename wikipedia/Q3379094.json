{"wiki_id": "http://www.wikidata.org/entity/Q3379094", "itemLabel": "Philip Wadler", "itemDescription": "American computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Philip_Wadler", "wikipedia_page": {"main": "Philip Lee Wadler (born April 8, 1956) is an American computer scientist known for his contributions to programming language design and type theory. In particular, he has contributed to the theory behind functional programming and the use of monads in functional programming, the design of the purely functional language Haskell, and the XQuery declarative query language. In 1984, he created the Orwell programming language. Wadler was involved in adding generic types to Java 5.0. He is also author of the paper Theorems for free! that gave rise to much research on functional language optimization (see also Parametricity).", "link_mentions": [{"page": "List of computer scientists", "response": ["* Philip Wadler \u2013 functional programming, Haskell, Monad, Java, Logic"]}, {"page": "Uniqueness type", "response": ["* Philip Wadler's writings on linear logic"]}, {"page": "Sequent calculus", "response": ["Now, instead of proving this from the axioms, it is enough to assume the premise of the implication and then try to prove its conclusion.\"Remember, the way that you prove  an implication is by assuming the hypothesis.\"\u2014Philip Wadler, on 2 November 2015, in his  Keynote: \"Propositions as Types\". Minute 14:36 /55:28 of Code Mesh video clip  Hence one moves to the following sequent:"]}, {"page": "List of important publications in computer science", "response": ["* Philip Wadler"]}, {"page": "Monad (functional programming)", "response": ["According to programming language researcher Philip Wadler, computer scientist John C. Reynolds anticipated several facets of it in the 1970s and early 1980s, when he discussed the value of continuation-passing style, category theory as a rich source for formal semantics, and the type distinction between values and computations.", "Several others popularized and built on this idea, including Philip Wadler and Simon Peyton Jones, both of whom were involved in the specification of Haskell. In particular, Haskell used a problematic \"lazy stream\" model up through v1.2 to reconcile I/O with lazy evaluation, until switching over to a more flexible monadic interface. The Haskell community would go on to apply monads to many problems in functional programming, and in the 2010s, researchers working with Haskell eventually recognized that monads are applicative functors; Brent Yorgey Typeclassopedia and that both monads and arrows are monoids. Brent Yorgey Monoids"]}, {"page": "System F", "response": ["In second-order intuitionistic logic, the second-order polymorphic lambda calculus (F2) was discovered  by Girard (1972)  and independently by Reynolds (1974).  Girard proved the Representation Theorem: that in second-order intuitionistic predicate logic (P2), functions from the natural numbers to the natural numbers that can be proved total, form a projection from P2 into F2. Reynolds proved the Abstraction Theorem: that every term in F2 satisfies a logical relation, which can be embedded into the logical relations P2. Reynolds proved  that a Girard projection followed by a Reynolds embedding form the identity, i.e., the Girard-Reynolds Isomorphism.Philip Wadler (2005)  The Girard-Reynolds Isomorphism (second edition) University of Edinburgh,  Programming Languages and Foundations at Edinburgh"]}, {"page": "School of Informatics, University of Edinburgh", "response": ["* Philip Wadler"]}, {"page": "Natural numbers object", "response": ["* Notes on datatypes as algebras for endofunctors by computer scientist Philip Wadler: http://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt"]}, {"page": "SIGPLAN", "response": ["* 2003 (for 1993): Imperative functional programming, Simon Peyton Jones and Philip Wadler"]}, {"page": "Corecursion", "response": ["Corecursion, referred to as circular programming, dates at least to , who credits John Hughes and Philip Wadler; more general forms were developed in . The original motivations included producing more efficient algorithms (allowing 1 pass over data in some cases, instead of requiring multiple passes) and implementing classical data structures, such as doubly linked lists and queues, in functional languages."]}, {"page": "List of University of Glasgow people", "response": ["* Philip Wadler, research in functional programming languages"]}, {"page": "John C. Reynolds", "response": ["* Olivier Danvy, Peter O'Hearn and Philip Wadler (editors), \"Festschrift for John C. Reynolds's 70th Birthday\". Theoretical Computer Science, 375(1\u20133):1\u2013350,  1 May 2007. Editorial, pages 1\u20132. "]}, {"page": "Strictness analysis", "response": ["Projection-based strictness analysis, introduced by Philip Wadler and R.J.M. Hughes, uses strictness projections to model more subtle forms of strictness, such as head-strictness in a list argument. (By contrast, GHC's demand analysis can only model strictness within product types, i.e., datatypes that only have a single constructor.) A function f is considered head-strict if f = f \\circ \\pi, where \\pi is the projection that head-evaluates its list argument."]}, {"page": "Phil Wadler", "response": ["#REDIRECT Philip Wadler"]}, {"page": "Type class", "response": ["Type classes were first implemented in the Haskell programming language after first being proposed by Philip Wadler and Stephen Blott as an extension to \"eqtypes\" in Standard ML, and were originally conceived as a way of implementing overloaded arithmetic and equality operators in a principled fashion."]}, {"page": "Programming language theory", "response": ["* Eugenio Moggi and Philip Wadler introduced the use of monads for structuring programs written in functional programming languages."]}, {"page": "Law of triviality", "response": ["Wadler's law, named for computer scientist Philip Wadler, is a principle which asserts that the bulk of discussion on programming-language design centers on syntax (which, for purposes of the argument, is considered a solved problem), as opposed to semantics. "]}, {"page": "Wadler", "response": ["*Philip Wadler (born 1956), American computer scientist"]}, {"page": "Bluespec", "response": ["*\"A History of Haskell: being lazy with class\", Paul Hudak (Yale University), John Hughes (Chalmers University), Simon Peyton Jones (Microsoft Research), Philip Wadler (University of Edinburgh), The Third ACM SIGPLAN History of Programming Languages Conference (HOPL-III) San Diego, California, June 9\u201310, 2007."]}, {"page": "Generics in Java", "response": ["In 1998, Gilad Bracha, Martin Odersky, David Stoutamire and Philip Wadler created Generic Java, an extension to the Java language to support generic types.GJ: Generic Java Generic Java was incorporated in Java with the addition of wildcards."]}, {"page": "Parametricity", "response": ["The parametricity theorem was originally stated by John C. Reynolds, who called it the abstraction theorem. In his paper \"Theorems for free!\", Philip Wadler described an application of parametricity to derive theorems about parametrically polymorphic functions based on their types."]}, {"page": "Deforestation (computer science)", "response": ["The term \"deforestation\" was originally coined by Philip Wadler in his 1990 paper \"Deforestation: transforming programs to eliminate trees\". "]}, {"page": "Journal of Functional Programming", "response": ["The Journal of Functional ProgrammingJournal of Functional Programming, DBLP. is a peer-reviewed scientific journal covering the design, implementation, and application of functional programming languages, spanning the range from mathematical theory to industrial practice. Topics covered include functional languages and extensions, implementation techniques, reasoning and proof, program transformation and synthesis, type systems, type theory, language-based security, memory management, parallelism and applications. The journal is of interest to computer scientists, software engineers, programming language researchers, and mathematicians interested in the logical foundations of programming. Philip Wadler was editor-in-chief from 1990 to 2004. The journal is indexed in Zentralblatt MATH."]}, {"page": "Paramorphism", "response": ["is an extension of the concept of catamorphism first introduced by Lambert Meertens to deal with a form which \u201ceats its argument and keeps it too\u201d,Philip Wadler.Views: A way for pattern matching to cohabit with data abstraction. Technical Report 34, Programming Methodology Group, University of G\u00f6teburg and Chalmers University of Technology, March 1987. "]}, {"page": "Orwell (programming language)", "response": ["Orwell is a small, lazy-evaluation functional programming language implemented principally by Martin Raskovsky and first released in 1984 by Philip Wadler during his time as a Research Fellow in the Programming Research Group, part of the Oxford University Computing Laboratory. Developed as a free alternative to Miranda, it was a forerunner of Haskell and was one of the first programming languages to support list comprehensions and pattern matching."]}, {"page": "List of programming language researchers", "response": ["* Philip Wadler, co-designer of Haskell"]}, {"page": "Expression problem", "response": ["Philip Wadler formulated the challenge and named it \"The Expression Problem\" in response to a discussion with Rice University's Programming Languages Team (PLT).", "*The Expression Problem by Philip Wadler."]}, {"page": "Bounded quantification", "response": ["* Gilad Bracha, Martin Odersky, David Stoutamire, and Philip Wadler. \"Making the future safe for the past: Adding genericity to the Java programming language\". In Object-Oriented Programming: Systems, Languages, Applications (OOPSLA). ACM, October 1998."]}, {"page": "Haskell (programming language)", "response": ["Type classes, which enable type-safe operator overloading, were first proposed by Philip Wadler and Stephen Blott for Standard ML but were first implemented in Haskell between 1987 and version 1.0.\"Type classes, first proposed during the design of the Haskell programming language, ...\"\u00a0\u2014John Garrett Morris (2013), \"Type Classes and Instance Chains: A Relational Approach\""]}]}}