{"wiki_id": "http://www.wikidata.org/entity/Q92949", "itemLabel": "Simon Peyton Jones", "itemDescription": "British computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Simon_Peyton_Jones", "wikipedia_page": {"main": "Simon Peyton Jones  (born 18 January 1958) is a British computer scientist who researches the implementation and applications of functional programming languages, particularly lazy functional programming.", "link_mentions": [{"page": "List of computer scientists", "response": ["* Simon Peyton Jones \u2013 functional programming"]}, {"page": "Functional programming", "response": ["The usual implementation strategy for lazy evaluation in functional languages is graph reduction.The Implementation of Functional Programming Languages. Simon Peyton Jones, published by Prentice Hall, 1987 Lazy evaluation is used by default in several pure functional languages, including Miranda, Clean, and Haskell."]}, {"page": "Denotational semantics", "response": ["Denotational semantics has been developed for modern programming languages that use capabilities like concurrency and exceptions, e.g., Concurrent ML,John Reppy \"Concurrent ML: Design, Application and Semantics\" in Springer-Verlag, Lecture Notes in Computer Science, Vol. 693. 1993 CSP,A. W. Roscoe. \"The Theory and Practice of Concurrency\" Prentice-Hall. Revised 2005. and Haskell.Simon Peyton Jones, Alastair Reid, Fergus Henderson, Tony Hoare, and Simon Marlow. \"A semantics for imprecise exceptions\" Conference on Programming Language Design and Implementation. 1999. The semantics of these languages is compositional in that the meaning of a phrase depends on the meanings of its subphrases. For example, the meaning of the applicative expression f(E1,E2) is defined in terms of semantics of its subphrases f, E1 and E2.  In a modern programming language, E1 and E2 can be evaluated concurrently and the execution of one of them might affect the other by interacting through shared objects causing their meanings to be defined in terms of each other.  Also, E1 or E2 might throw an exception which could terminate the execution of the other one. The sections below describe special cases of the semantics of these modern programming languages."]}, {"page": "Generic programming", "response": ["* Simon Peyton Jones, editor, The Haskell 98 Language Report, Revised 2002.", "* Ralf L\u00e4mmel and Simon Peyton Jones, \"Scrap Your Boilerplate: A Practical Design Pattern for Generic Programming,\" In Proceedings of the ACM SIGPLAN International Workshop on Types in Language Design and Implementation (TLDI'03), 2003. (Also see the website devoted to this research)"]}, {"page": "Awkward squad", "response": ["*\"Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign-language calls in Haskell\" - a paper by Simon Peyton Jones"]}, {"page": "Lock (computer science)", "response": ["One of lock-based programming's biggest problems is that \"locks don't compose\": it is hard to combine small, correct lock-based modules into equally correct larger programs without modifying the modules or at least knowing about their internals. Simon Peyton Jones (an advocate of software transactional memory) gives the following example of a banking application:"]}, {"page": "Glasgow Haskell Compiler", "response": [" The lead developers are Simon Peyton Jones and Simon Marlow.", "GHC originally started in 1989 as a prototype, written in LML (Lazy ML) by Kevin Hammond at the University of Glasgow. Later that year, the prototype was completely rewritten in Haskell, except for its parser, by Cordelia Hall, Will Partain, and Simon Peyton Jones. Its first beta release was on 1 April 1991 and subsequent releases added a strictness analyzer as well as language extensions such as monadic I/O, mutable arrays, unboxed data types, concurrent and parallel programming models (such as software transactional memory and data parallelism) and a profiler."]}, {"page": "Graph reduction", "response": ["*Simon Peyton Jones, The Implementation of Functional Programming Languages, Prentice Hall, 1987.  Full text online."]}, {"page": "Monad (functional programming)", "response": ["Several others popularized and built on this idea, including Philip Wadler and Simon Peyton Jones, both of whom were involved in the specification of Haskell. In particular, Haskell used a problematic \"lazy stream\" model up through v1.2 to reconcile I/O with lazy evaluation, until switching over to a more flexible monadic interface. The Haskell community would go on to apply monads to many problems in functional programming, and in the 2010s, researchers working with Haskell eventually recognized that monads are applicative functors; Brent Yorgey Typeclassopedia and that both monads and arrows are monoids. Brent Yorgey Monoids"]}, {"page": "Cambridge Diploma in Computer Science", "response": ["* Simon Peyton Jones"]}, {"page": "Simon Jones", "response": ["*Simon Peyton Jones (born 1958), British computer scientist"]}, {"page": "Guard (computer science)", "response": ["In addition to a guard attached to a pattern, pattern guard can refer to the use of pattern matching in the context of a guard. In effect, a match of the pattern is taken to mean pass. This meaning was introduced in a proposal for Haskell by Simon Peyton Jones titled A new view of guards in April 1997 and was used in the implementation of the proposal. The feature provides the ability to use patterns in the guards of a pattern."]}, {"page": "SIGPLAN", "response": ["* 2011: Simon Peyton Jones and Simon Marlow (Glasgow Haskell Compiler)2011: Simon Peyton Jones and Simon Marlow. Sigplan. Retrieved on 2013-08-20.", "* 2016: Simon Peyton Jones", "* 2014: Simon Peyton Jones", "* 2003 (for 1993): Imperative functional programming, Simon Peyton Jones and Philip Wadler", "* 2019 (for 2009): Runtime Support for Multicore Haskell: Simon Marlow, Simon Peyton Jones, and Satnam Singh"]}, {"page": "List of University of Glasgow people", "response": ["* Simon Peyton Jones, research in functional programming languages"]}, {"page": "C--", "response": ["C-- (pronounced C minus minus) is a C-like programming language. Its creators, functional programming researchers Simon Peyton Jones and Norman Ramsey, designed it to be generated mainly by compilers for very high-level languages rather than written by human programmers. Unlike many other intermediate languages, its representation is plain ASCII text, not bytecode or another binary format.", "Some developers of C--, including Simon Peyton Jones, Jo\u00e3o Dias, and Norman Ramsey, work or have worked on GHC, whose development has led to extensions in the C-- language, forming the Cmm dialect which uses the C preprocessor for ergonomics."]}, {"page": "Software transactional memory", "response": ["In 2005, Tim Harris, Simon Marlow, Simon Peyton Jones, and Maurice Herlihy described an STM system built on Concurrent Haskell that enables arbitrary atomic operations to be composed into larger atomic operations, a useful concept impossible with lock-based programming. To quote the authors:"]}, {"page": "Simon's Town", "response": ["*Simon Peyton Jones, computer scientist born in (and named after) Simonstown"]}, {"page": "Philip Wadler", "response": ["Wadler received the Most Influential POPL Paper Award in 2003 for the 1993 POPL Symposium paper Imperative Functional Programming, jointly with Simon Peyton Jones."]}, {"page": "Cabal (software)", "response": ["* \"The Haskell Cabal: A Common Architecture for Building Applications and Tools\" -(the original proposal and specification, by Isaac Jones, Simon Peyton Jones, Simon Marlow, Malcolm Wallace, and Ross Patterson; a version was submitted to the Haskell Workshop, 2005)"]}, {"page": "Bluespec", "response": ["*\"A History of Haskell: being lazy with class\", Paul Hudak (Yale University), John Hughes (Chalmers University), Simon Peyton Jones (Microsoft Research), Philip Wadler (University of Edinburgh), The Third ACM SIGPLAN History of Programming Languages Conference (HOPL-III) San Diego, California, June 9\u201310, 2007."]}, {"page": "Generalized algebraic data type", "response": ["*Papers about type inference for GADTs, bibliography by Simon Peyton Jones", "*Type inference with constraints, bibliography by Simon Peyton Jones"]}, {"page": "Xmonad", "response": ["* \"Taste of Haskell\" - OSCON presentation by Simon Peyton Jones on Haskell, using xmonad as an example"]}, {"page": "SLPJ", "response": ["#REDIRECT Simon Peyton Jones"]}, {"page": "Distinguished Fellow of the British Computer Society", "response": ["| Simon Peyton Jones || 2017"]}, {"page": "List of programming language researchers", "response": ["* Simon Peyton Jones, lead developer of the Glasgow Haskell Compiler and major contributor to the design of the Haskell programming language"]}]}}