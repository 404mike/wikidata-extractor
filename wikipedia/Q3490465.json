{"wiki_id": "http://www.wikidata.org/entity/Q3490465", "itemLabel": "Robert Kowalski", "itemDescription": "British computer scientist", "wikipedia_url": "https://en.wikipedia.org/wiki/Robert_Kowalski", "wikipedia_page": {"main": "Robert Anthony  Kowalski (born 15 May 1941) is an American-British logician and computer scientist, whose research is concerned with developing both human-oriented models of computing and computational models of human thinking. He has spent most of his career in the United Kingdom.\n\n", "link_mentions": [{"page": "List of computer scientists", "response": ["* Robert Kowalski \u2013 logic programming"]}, {"page": "Logic programming", "response": ["Logic programming in its present form can be traced back to debates in the late 1960s and early 1970s about declarative versus procedural representations of knowledge in artificial intelligence. Advocates of declarative representations were notably working at Stanford, associated with John McCarthy, Bertram Raphael and Cordell Green, and in Edinburgh, with John Alan Robinson (an academic visitor from Syracuse University), Pat Hayes, and Robert Kowalski. Advocates of procedural representations were mainly centered at MIT, under the leadership of Marvin Minsky and Seymour Papert.", "Hayes and Kowalski in Edinburgh tried to reconcile the logic-based declarative approach to knowledge representation with Planner's procedural approach. Hayes (1973) developed an equational language, Golux, in which different procedures could be obtained by altering the behavior of the theorem prover.Pat Hayes. Computation and Deduction. In Proceedings of the 2nd MFCS Symposium. Czechoslovak Academy of Sciences, 1973, pp.\u00a0105\u2013118. Kowalski, on the other hand, developed SLD resolution,Robert Kowalski, \"Predicate Logic as a Programming Language\", Memo 70, Department of Artificial Intelligence, Edinburgh University, 1973. Also in Proceedings IFIP Congress, Stockholm, North Holland Publishing Co., 1974, pp.\u00a0569\u2013574. a variant of SL-resolution,Robert Kowalski and Donald and Kuehner, \"Linear Resolution with Selection Function\", Artificial Intelligence, Vol. 2, 1971, pp.\u00a0227\u201360. and showed how it treats implications as goal-reduction procedures. Kowalski collaborated with Colmerauer in Marseille, who developed these ideas in the design and implementation of the programming language Prolog.", "Maarten van Emden and Robert Kowalski defined three semantics for Horn clause logic programs, model-theoretic, fixed-point, and proof-theoretic, and showed that they are equivalent.", "The programming language Prolog was developed in 1972 by Alain Colmerauer. It emerged from a collaboration between Colmerauer in Marseille and Robert Kowalski in Edinburgh. Colmerauer was working on natural-language understanding, using logic to represent semantics and using resolution for question-answering. During the summer of 1971, Colmerauer and Kowalski discovered that the clausal form of logic could be used to represent formal grammars and that resolution theorem provers could be used for parsing. They observed that some theorem provers, like hyper-resolution, behave as bottom-up parsers and others, like SL-resolution (1971), behave as top-down parsers."]}, {"page": "Prolog", "response": ["The language was developed and implemented in Marseille, France, in 1972 by Alain Colmerauer with Philippe Roussel, based on Robert Kowalski's procedural interpretation of Horn clauses.", "The name Prolog was chosen by Philippe Roussel as an abbreviation for  (French for programming in logic).  It was created around 1972 by Alain Colmerauer with Philippe Roussel, based on Robert Kowalski's procedural interpretation of Horn clauses.  It was motivated in part by the desire to reconcile the use of logic as a declarative knowledge representation language with the procedural representation of knowledge that was popular in North America in the late 1960s and early 1970s.  According to Robert Kowalski, the first Prolog system was developed in 1972 by Colmerauer and Phillipe Roussel. The first implementation of Prolog was an interpreter written in Fortran by Gerard Battani and Henri Meloni. David H. D. Warren took this interpreter to Edinburgh, and there implemented an alternative front-end, which came to define the \u201cEdinburgh Prolog\u201d syntax used by most modern implementations.  Warren also implemented the first compiler for Prolog, creating the influential DEC-10 Prolog in collaboration with Fernando Pereira.  Warren later generalised the ideas behind DEC-10 Prolog, to create the Warren Abstract Machine."]}, {"page": "List of Polish people", "response": ["* Robert Kowalski"]}, {"page": "List of logicians", "response": ["* Robert Kowalski (US, UK, born 1941)"]}, {"page": "Neats and scruffies", "response": ["The distinction between neat and scruffy originated in the mid-1970s, by Roger Schank. Schank used the terms to characterize the difference between his work on natural language processing (which represented commonsense knowledge in the form of large amorphous semantic networks) from the work of John McCarthy, Allen Newell, Herbert A. Simon, Robert Kowalski and others whose work was based on logic and formal extensions of logic. Schank described himself as an AI scruffy. He made this distinction in linguistics, arguing strongly against Chomsky's view of language.", "Other AI laboratories (of which the largest were Stanford, Carnegie Mellon University and the University of Edinburgh) focused on logic and formal problem solving as a basis for AI. These institutions supported the work of John McCarthy, Herbert Simon, Allen Newell, Donald Michie, Robert Kowalski, and other \"neats\".", "* Robert Kowalski"]}, {"page": "Index of philosophy articles (R\u2013Z)", "response": ["* Robert Kowalski"]}, {"page": "University of Bridgeport", "response": ["*Robert Kowalski, logician"]}, {"page": "School of Informatics, University of Edinburgh", "response": ["* Robert Kowalski, logician, computer scientist at Imperial College London"]}, {"page": "Datalog", "response": ["There are three widely-used approaches to the semantics of Datalog programs: model-theoretic, fixed-point, and proof-theoretic, developed and shown to be equivalent for Horn clause logic programs more generally by Maarten van Emden and Robert KowalskiVan Emden, M.H. and Kowalski, R.A., 1976. The semantics of predicate logic as a programming language. Journal of the ACM (JACM), 23(4), pp.733-742."]}, {"page": "List of Polish Americans", "response": ["*Robert Kowalski (born 1941) Logician, and computer scientist"]}, {"page": "David H. D. Warren", "response": ["Warren received a Ph.D. in artificial intelligence from the University of Edinburgh in 1977 under advisor Robert Kowalski, and (a second advisor) Donald Michie. -- (accessed 10 August 2014)"]}, {"page": "Kowalski", "response": ["* Robert Kowalski (born 1941), British logician"]}, {"page": "Problem solving", "response": ["The resolution theorem-prover used by Cordell Green bore little resemblance to human problem solving methods. In response to criticism of his approach, emanating from researchers at MIT, Robert Kowalski developed logic programming and SLD resolution,Kowalski, R. Predicate Logic as a Programming Language Memo 70, Department of Artificial Intelligence, Edinburgh University. 1973. Also in Proceedings IFIP Congress, Stockholm, North Holland Publishing Co., 1974, pp.\u00a0569\u2013574. which solves problems by problem decomposition. He has advocated logic for both computer and human problem solvingKowalski, R., Logic for Problem Solving, North Holland, Elsevier, 1979 and computational logic to improve human thinkingKowalski, R., Computational Logic and Human Thinking: How to be Artificially Intelligent, Cambridge University Press, 2011."]}, {"page": "Actor model", "response": ["One of the key motivations for the development of the actor model was to understand and deal with the control structure issues that arose in development of the Planner programming language. Once the actor model was initially defined, an important challenge was to understand the power of the model relative to Robert Kowalski's thesis that \"computation can be subsumed by deduction\". Hewitt argued that Kowalski's thesis turned out to be false for the concurrent computation in the actor model (see Indeterminacy in concurrent computation)."]}, {"page": "Logic Programming Associates", "response": ["LPA was established to exploit research at the Department of Computing and Control at Imperial College London into logic programming carried out under the supervision of Prof Robert Kowalski. One of the first implementations made available by LPA was micro-PROLOG which ran on popular 8-bit home computers such as the Sinclair Spectrum and Apple II. This was followed by micro-PROLOG Professional one of the first Prolog implementations for MS-DOS."]}, {"page": "Conference on Automated Deduction", "response": ["|| 05 || 0087 ||  || 1980 || Les Arcs, France || Wolfgang Bibel, Robert Kowalski"]}, {"page": "Indeterminacy in concurrent computation", "response": ["Patrick Hayes [1973] argued that the \"usual sharp distinction that is made between the processes of computation and deduction, is misleading\". Robert Kowalski developed the thesis that computation could be subsumed by deduction and quoted with approval \"Computation is controlled deduction.\" which he attributed to Hayes in his 1988 paper on the early history of Prolog. Contrary to Kowalski and Hayes, Carl Hewitt claimed that logical deduction was incapable of carrying out concurrent computation in open systems.", "*Robert Kowalski Predicate Logic as Programming Language Memo 70, Department of Artificial Intelligence, Edinburgh University. 1973.", "*Robert Kowalski. The limitation of logic Proceedings of the 1986 ACM 14th Annual Conference on Computer science.", "*Robert Kowalski. The Early Years of Logic Programming Communications of the ACM. January 1988."]}, {"page": "IJCAI Award for Research Excellence", "response": ["* Robert Kowalski (2011)"]}, {"page": "History of artificial intelligence", "response": [",  A more fruitful approach to logic was developed in the 1970s by Robert Kowalski at the University of Edinburgh, and soon this led to the collaboration with French researchers Alain Colmerauer and Philippe Roussel who created the successful logic programming language Prolog."]}, {"page": "Event calculus", "response": ["The event calculus is a logical language for representing and reasoning about events and their effects first presented by Robert Kowalski and Marek Sergot in 1986. It was extended by Murray Shanahan and Rob Miller in the 1990s. Similar to other languages for reasoning about change, the event calculus represents the effects of actions on fluents. However, events can also be external to the system. In the event calculus, one can specify the value of fluents at some given time points, the events that take place at given time points, and  their effects."]}, {"page": "Definite clause grammar", "response": ["The history of DCGs is closely tied to the history of Prolog, and the history of Prolog revolves around several researchers in both Marseille, France, and Edinburgh, Scotland. According to Robert Kowalski, an early developer of Prolog, the first Prolog system was developed in 1972 by Alain Colmerauer and Phillipe Roussel. The first program written in the language was a large natural-language processing system. Fernando Pereira and David Warren at the University of Edinburgh were also involved in the early development of Prolog."]}, {"page": "List of University of Chicago alumni", "response": ["* Robert Kowalski \u2013 computer scientist in field of logic programming"]}, {"page": "Stable model semantics", "response": ["where A,B_{1},\\dots,B_{m},C_{1},\\dots,C_{n} are ground atoms. If  does not contain negation (n=0 in every rule of the program) then, by definition, the only stable model of  is its model that is minimal relative to set inclusion.This approach to the semantics of logic programs without negation is due to Maarten van Emden and Robert Kowalski [1976]. (Any program without negation has exactly one minimal model.) To extend this definition to the case of programs with negation, we need the auxiliary concept of the reduct, defined as follows."]}, {"page": "Fairfield College Preparatory School", "response": ["*Robert Kowalski '58 - logician"]}, {"page": "Keith Clark (computer scientist)", "response": ["Clark undertook Voluntary Service Overseas from 1967 to 1968 as a teacher of Mathematics at a school in Sierra Leone. He lectured in Computer Science at the Mathematics Department of Queen Mary College from 1969 to 1975. In 1975 he moved to Imperial College London, where he became a Senior Lecturer in the Department of Computer Science and joined Robert Kowalski in setting up the Logic programming group. From 1987 to 2009 he was Professor of Computational Logic at Imperial College."]}, {"page": "Deductive language", "response": ["As the name implies, deductive languages are rooted in the principles of deductive reasoning; making inferences based upon current knowledge.  The first recommendation to use a clausal form of logic for representing computer programs was made by Cordell Green (1969) at Stanford Research Institute (now SRI International). This idea can also be linked back to the battle between procedural and declarative information representation in early artificial intelligence systems.  Deductive languages and their use in logic programming can also be dated to the same year when Foster and Elcock introduced Absys, the first deductive/logical programming language.  Shortly after, the first Prolog system was introduced in 1972 by Colmerauer through collaboration with Robert Kowalski.", "* Robert Kowalski and Donald and Kuehner, Linear Resolution with Selection Function Artificial Intelligence, Vol. 2, 1971, pp.\u00a0227\u201360.", "* Robert Kowalski Predicate Logic as a Programming Language Memo 70, Department of Artificial Intelligence, Edinburgh University.  1973. Also in P"]}, {"page": "Robert Anthony Kowalski", "response": ["#Redirect Robert Kowalski"]}, {"page": "Bob Kowalski", "response": ["#Redirect Robert Kowalski"]}, {"page": "May 1941", "response": ["*Born: Robert Kowalski, logician and computer scientist, in Bridgeport, Connecticut"]}, {"page": "SLD resolution", "response": ["The name \"SLD resolution\" was given by Maarten van Emden for the unnamed inference rule introduced by Robert Kowalski.Robert Kowalski Predicate Logic as a Programming Language Memo 70, Department of Artificial Intelligence, University of Edinburgh.  1973. Also in Proceedings IFIP Congress, Stockholm, North Holland Publishing Co., 1974, pp. 569-574. Its name is derived from SL resolution,Robert Kowalski and Donald Kuehner, Linear Resolution with Selection Function Artificial Intelligence, Vol. 2, 1971, pp. 227-60. which is both sound and refutation complete for the unrestricted clausal form of logic. \"SLD\" stands for \"SL resolution with Definite clauses\"."]}, {"page": "R. A. Kowalski", "response": ["* Robert Kowalski (born 1941), logician and computer scientist"]}]}}