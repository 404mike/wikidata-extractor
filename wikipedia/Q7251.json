{"wiki_id": "http://www.wikidata.org/entity/Q7251", "itemLabel": "Alan Turing", "itemDescription": "British mathematician, logician, cryptanalyst, and computer scientist (1912-1954)", "wikipedia_url": "https://en.wikipedia.org/wiki/Alan_Turing", "wikipedia_page": {"main": "Alan Mathison Turing  (; 23 June 1912 \u2013 7 June 1954) was an English mathematician, computer scientist, logician, cryptanalyst, philosopher, and theoretical biologist. Turing was highly influential in the development of theoretical computer science, providing a formalisation of the concepts of algorithm and computation with the Turing machine, which can be considered a model of a general-purpose computer. Turing is widely considered to be the father of theoretical computer science and artificial intelligence.Born in Maida Vale, London, Turing was raised in southern England. He graduated at King's College, Cambridge, with a degree in mathematics. Whilst he was a fellow at Cambridge, he published a proof demonstrating that some purely mathematical yes\u2013no questions can never be answered by computation and defined a Turing machine, and went on to prove the halting problem for Turing machines is undecidable. In 1938, he obtained his PhD from the Department of Mathematics at Princeton University. During the Second World War, Turing worked for the Government Code and Cypher School (GC&CS) at Bletchley Park, Britain's codebreaking centre that produced Ultra intelligence. For a time he led Hut 8, the section that was responsible for German naval cryptanalysis. Here, he devised a number of techniques for speeding the breaking of German ciphers, including improvements to the pre-war Polish bombe method, an electromechanical machine that could find settings for the Enigma machine. Turing played a crucial role in cracking intercepted coded messages that enabled the Allies to defeat the Axis powers in many crucial engagements, including the Battle of the Atlantic.After the war, Turing worked at the National Physical Laboratory, where he designed the Automatic Computing Engine (ACE), one of the first designs for a stored-program computer. In 1948, Turing joined Max Newman's Computing Machine Laboratory, at the Victoria University of Manchester, where he helped develop the Manchester computers and became interested in mathematical biology. He wrote a paper on the chemical basis of morphogenesis and predicted oscillating chemical reactions such as the Belousov\u2013Zhabotinsky reaction, first observed in the 1960s. Despite these accomplishments, he was never fully recognised in his home country during his lifetime because much of his work was covered by the Official Secrets Act.Turing was prosecuted in 1952 for homosexual acts. He accepted hormone treatment with DES, so-called chemical castration, as an alternative to prison. In 2009, following an Internet campaign, British Prime Minister Gordon Brown made an official public apology on behalf of the British government for \"the appalling way he was treated\". Queen Elizabeth II granted Turing a posthumous pardon in 2013. The \"Alan Turing law\" is now an informal term for a 2017 law in the United Kingdom that retroactively pardoned men cautioned or convicted under historical legislation that outlawed homosexual acts.Turing died in 1954, 16 days before his 42nd birthday, from cyanide poisoning. An inquest determined his death as a suicide, but it has been noted that the known evidence is also consistent with accidental poisoning.\nTuring has an extensive legacy with statues of him and many things named after him, including an annual award for computer science innovations. He appears on the current Bank of England \u00a350 note, which was released to coincide with his birthday. A 2019 BBC series, as voted by the audience, named him the greatest person of the 20th century.\n\n", "link_mentions": [{"page": "Algorithm", "response": ["A partial formalization of the modern concept of algorithm began with attempts to solve the Entscheidungsproblem  (decision problem) posed by David Hilbert in 1928. Later formalizations were framed as attempts to define \"effective calculability\"Kleene 1943 in Davis 1965:274 or \"effective method\".Rosser 1939 in Davis 1965:225 Those formalizations included the G\u00f6del\u2013Herbrand\u2013Kleene recursive functions of 1930, 1934 and 1935, Alonzo Church's lambda calculus of 1936, Emil Post's Formulation 1 of 1936, and Alan Turing's Turing machines of 1936\u201337 and 1939.", "Effective calculability: In an effort to solve the Entscheidungsproblem defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an \"effective method\" or \"effective calculation\" or \"effective calculability\" (i.e., a calculation that would succeed). In rapid succession the following appeared: Alonzo Church, Stephen Kleene and J.B. Rosser's \u03bb-calculuscf. footnote in Alonzo Church 1936a in Davis 1965:90 and 1936b in Davis 1965:110 a finely honed definition of \"general recursion\" from the work of G\u00f6del acting on suggestions of Jacques Herbrand (cf. G\u00f6del's Princeton lectures of 1934) and subsequent simplifications by Kleene.Kleene 1935\u20136 in Davis 1965:237ff, Kleene 1943 in Davis 1965:255ff Church's proofChurch 1936 in Davis 1965:88ff that the Entscheidungsproblem was unsolvable, Emil Post's definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction.cf. \"Finite Combinatory Processes \u2013 formulation 1\", Post 1936 in Davis 1965:289\u2013290 Alan Turing's proof of that the Entscheidungsproblem was unsolvable by use of his \"a- [automatic-] machine\"Turing 1936\u201337 in Davis 1965:116ff\u2014in effect almost identical to Post's \"formulation\", J. Barkley Rosser's definition of \"effective method\" in terms of \"a machine\".Rosser 1939 in Davis 1965:226 Kleene's proposal of a precursor to \"Church thesis\" that he called \"Thesis I\",Kleene 1943 in Davis 1965:273\u2013274 and a few years later Kleene's renaming his Thesis \"Church's Thesis\"Kleene 1952:300, 317 and proposing \"Turing's Thesis\".Kleene 1952:376", "=== Emil Post (1936) and Alan Turing (1936\u201337, 1939) ===", "Alan Turing's workTuring 1936 in Davis 1965, Turing 1939 in Davis 1965:160 preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing. Turing's biographer believed that Turing's use of a typewriter-like model derived from a youthful interest: \"Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter, and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'\".Hodges, p.\u00a096 Given the prevalence of Morse code and telegraphy, ticker tape machines, and teletypewriters we might conjecture that all were influences."]}, {"page": "Apple Inc.", "response": ["Apple's first logo, designed by Ron Wayne, depicts Sir Isaac Newton sitting under an apple tree. It was almost immediately replaced by Rob Janoff's \"rainbow Apple\", the now-familiar rainbow-colored silhouette of an apple with a bite taken out of it. Janoff presented Jobs with several different monochromatic themes for the \"bitten\" logo, and Jobs immediately took a liking to it. However, Jobs insisted that the logo be colorized to humanize the company. The logo was designed with a bite so that it would not be confused with a cherry. The colored stripes were conceived to make the logo more accessible, and to represent the fact the Apple II could generate graphics in color. This logo is often erroneously referred to as a tribute to Alan Turing, with the bite mark a reference to his method of suicide. Both Janoff and Apple deny any homage to Turing in the design of the logo."]}, {"page": "Ada Lovelace", "response": ["Note G also contains Lovelace's dismissal of artificial intelligence. She wrote that \"The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform. It can follow analysis; but it has no power of anticipating any analytical relations or truths.\" This objection has been the subject of much debate and rebuttal, for example by Alan Turing in his paper \"Computing Machinery and Intelligence\"."]}, {"page": "Alan Garner", "response": ["Garner faced several life-threatening childhood illnesses, which left him bed ridden for much of the time. He attended a local village school, where he found that, despite being praised for his intelligence, he was punished for speaking in his native Cheshire dialect; for instance, when he was six his primary school teacher washed his mouth out with soapy water. Garner then won a place at Manchester Grammar School, where he received his secondary education; entry was means-tested, resulting in his school fees being waived. Rather than focusing his interest on creative writing, it was here that he excelled at sprinting. He used to go jogging along the highway, and later claimed that in doing so he was sometimes accompanied by the mathematician Alan Turing, who shared his fascination with the Disney film Snow White and the Seven Dwarfs. Garner was then conscripted into national service, serving for a time with the Royal Artillery while posted to Woolwich in Southeast London."]}, {"page": "Artificial intelligence", "response": ["The study of mechanical or \"formal\" reasoning began with philosophers and mathematicians in antiquity. The study of mathematical logic led directly to Alan Turing's theory of computation, which suggested that a machine, by shuffling symbols as simple as \"0\" and \"1\", could simulate any conceivable act of mathematical deduction. This insight that digital computers can simulate any process of formal reasoning is known as the Church\u2013Turing thesis.", "Alan Turing wrote in 1950 \"I propose to consider the question 'can machines think'?\""]}, {"page": "Analytical Engine", "response": ["The programming language to be employed by users was akin to modern day assembly languages. Loops and conditional branching were possible, and so the language as conceived would have been Turing-complete as later defined by Alan Turing. Three different types of punch cards were used: one for arithmetical operations, one for numerical constants, and one for load and store operations, transferring numbers from the store to the arithmetical unit or back. There were three separate readers for the three types of cards. Babbage developed some two dozen programs for the Analytical Engine between 1837 and 1840, and one program later. These programs treat polynomials, iterative formulas, Gaussian elimination, and Bernoulli numbers."]}, {"page": "Automated theorem proving", "response": ["However, shortly after this positive result, Kurt G\u00f6del published On Formally Undecidable Propositions of Principia Mathematica and Related Systems (1931), showing that in any sufficiently strong axiomatic system there are true statements which cannot be proved in the system. This topic was further developed in the 1930s by Alonzo Church and Alan Turing, who on the one hand gave two independent but equivalent definitions of computability, and on the other gave concrete examples for undecidable questions."]}, {"page": "Bell Labs", "response": ["In the early 1940s, the photovoltaic cell was developed by Russell Ohl. In 1943, Bell developed SIGSALY, the first digital scrambled speech transmission system, used by the Allies in World War II. The British wartime codebreaker Alan Turing visited the labs at this time, working on speech encryption and meeting Claude Shannon.", "| 50px|none || Claude Shannon  ||  Founded information theory with the publishing of A Mathematical Theory of Communication in 1948. He is perhaps equally well known for founding both digital computer and digital circuit design theory in 1937, when, as a 21-year-old master's degree student at the Massachusetts Institute of Technology (MIT), he wrote his thesis demonstrating that electrical applications of Boolean algebra could construct any logical, numerical relationship. Shannon contributed to the field of cryptanalysis for national defense during World War II, including his basic work on codebreaking and secure telecommunications.  For two months early in 1943, Shannon came into contact with the leading British cryptanalyst and mathematician Alan Turing.  Shannon and Turing met at teatime in the cafeteria. Turing showed Shannon his 1936 paper that defined what is now known as the \"Universal Turing machine\"; this impressed Shannon, as many of its ideas complemented his own."]}, {"page": "Bletchley Park", "response": ["During World War II the estate housed the Government Code and Cypher School (GC&CS), which regularly penetrated the secret communications of the Axis Powersmost importantly the German Enigma and Lorenz ciphers. The GC&CS team of codebreakers included Alan Turing, Gordon Welchman, Hugh Alexander, Bill Tutte, and Stuart Milner-Barry. The nature of the work at Bletchley remained secret until many years after the war.", "Denniston recognised, however, that the enemy's use of electromechanical cipher machines meant that formally trained mathematicians would also be needed; Oxford's Peter Twinn joined GC&CS in February 1939; Cambridge's Alan Turing and Gordon Welchman began training in 1938 and reported to Bletchley the day after war was declared, along with John Jeffreys. Later-recruited cryptanalysts included the mathematicians Derek Taunt, in  Jack Good, Bill Tutte, Appendix 4 in  and Max Newman; historian Harry Hinsley, and chess champions Hugh Alexander and Stuart Milner-Barry. Joan Clarke was one of the few women employed at Bletchley as a full-fledged cryptanalyst.", "The bombe was an electromechanical device whose function was to discover some of the daily settings of the Enigma machines on the various German military networks. Its pioneering design was developed by Alan Turing (with an important contribution from Gordon Welchman) and the machine was engineered by Harold 'Doc' Keen of the British Tabulating Machine Company. Each machine was about  high and wide,  deep and weighed about a ton.", "right|thumb|The stableyard cottages, where Alan Turing worked", "** Alan Turing", "** Alan Turing's office", "In October 2005, American billionaire Sidney Frank donated \u00a3500,000 to Bletchley Park Trust to fund a new Science Centre dedicated to Alan Turing.Action This Day , Bletchley Park News, 28 February 2006 Simon Greenish joined as Director in 2006 to lead the fund-raising effort in a post he held until 2012 when Iain Standen took over the leadership role. In July 2008, a letter to The Times from more than a hundred academics condemned the neglect of the site.\"Neglect of Bletchley condemned\" , BBC News. In September 2008, PGP, IBM, and other technology firms announced a fund-raising campaign to repair the facility. On 6 November 2008 it was announced that English Heritage would donate \u00a3300,000 to help maintain the buildings at Bletchley Park, and that they were in discussions regarding the donation of a further \u00a3600,000.\"New lifeline for Bletchley Park\" , BBC News.", "Due to the COVID-19 pandemic the Trust expected to lose more than \u00a32m in 2020 and be required to cut a third of its workforce. Former MP John Leech asked tech giants Amazon, Apple, Google, Facebook and Microsoft to donate \u00a3400,000 each to secure the future of the Trust. Leech had led the successful campaign to pardon Alan Turing and implement Turing's Law.", "* The film The Imitation Game (2014), starring Benedict Cumberbatch as Alan Turing, is set in Bletchley Park, and was partially filmed there.", "* How Alan Turing Cracked The Enigma Code Imperial War Museums"]}, {"page": "Software", "response": ["The first theory about software, prior to the creation of computers as we know them today, was proposed by Alan Turing in his 1935 essay, On Computable Numbers, with an Application to the Entscheidungsproblem (decision problem). This eventually led to the creation of the academic fields of computer science and software engineering; both fields study software and its creation. Computer science is the theoretical study of computer and software (Turing's essay is an example of computer science), whereas software engineering is the application of engineering principles to development of software. Prior to 1946, software was not yet the programs stored in the memory of stored-program digital computers, as we now understand it; the first electronic computing devices were instead rewired in order to \"reprogram\" them."]}, {"page": "Computer science", "response": ["Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science. Early computer science was strongly influenced by the work of mathematicians such as Kurt G\u00f6del, Alan Turing, John von Neumann, R\u00f3zsa P\u00e9ter and Alonzo Church and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.", "Artificial intelligence (AI) aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development, which require computational understanding. The starting point in the late 1940s was Alan Turing's question \"Can computers think?\", and the question remains effectively unanswered, although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.", "* Gottfried Wilhelm Leibniz's, George Boole's, Alan Turing's, Claude Shannon's, and Samuel Morse's insight: there are only two objects that a computer has to deal with in order to represent \"anything\".", "* Alan Turing's insight: there are only five actions that a computer has to perform in order to do \"anything\".", ":: Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:B. Jack Copeland, 2012. Alan Turing's Electronic Brain: The Struggle to Build the ACE, the World's Fastest Computer. OUP Oxford. p. 107. ."]}, {"page": "Computational linguistics", "response": ["In a now famous paper published in 1950 Alan Turing proposed the possibility that machines might one day have the ability to \"think\". As a thought experiment for what might define the concept of thought in machines, he proposed an \"imitation test\" in which a human subject has two text-only conversations, one with a fellow human and another with a machine attempting to respond like a human. Turing proposes that if the subject cannot tell the difference between the human and the machine, it may be concluded that the machine is capable of thought. Today this test is known as the Turing test and it remains an influential idea in the area of artificial intelligence.", "* The 2014 film The Imitation Game follows the life of computer scientist Alan Turing, developer of the Turing Test."]}, {"page": "Cognitive science", "response": ["Another precursor was the early development of the theory of computation and the digital computer in the 1940s and 1950s. Kurt G\u00f6del, Alonzo Church, Alan Turing, and John von Neumann were instrumental in these developments. The modern computer, or Von Neumann machine, would play a central role in cognitive science, both as a metaphor for the mind, and as a tool for investigation."]}, {"page": "Consciousness", "response": ["One of the most influential contributions to this question was an essay written in 1950 by pioneering computer scientist Alan Turing, titled Computing Machinery and Intelligence.  Turing disavowed any interest in terminology, saying that even \"Can machines think?\" is too loaded with spurious connotations to be meaningful; but he proposed to replace all such questions with a specific operational test, which has become known as the Turing test.  To pass the test, a computer must be able to imitate a human well enough to fool interrogators. In his essay Turing discussed a variety of possible objections, and presented a counterargument to each of them.  The Turing test is commonly cited in discussions of artificial intelligence as a proposed criterion for machine consciousness; it has provoked a great deal of philosophical debate. For example, Daniel Dennett and Douglas Hofstadter argue that anything capable of passing the Turing test is necessarily conscious, while David Chalmers argues that a philosophical zombie could pass the test, yet fail to be conscious. A third group of scholars have argued that with technological growth once machines begin to display any substantial signs of human-like behavior then the dichotomy (of human consciousness compared to human-like consciousness) becomes pass\u00e9 and issues of machine autonomy begin to prevail even as observed in its nascent form within contemporary industry and technology. J\u00fcrgen Schmidhuber argues that consciousness is simply the result of compression. As an agent sees representation of itself recurring in the environment, the compression of this representation can be called consciousness."]}, {"page": "Claude Shannon", "response": ["For two months early in 1943, Shannon came into contact with the leading British mathematician Alan Turing. Turing had been posted to Washington to share with the U.S. Navy's cryptanalytic service the methods used by the British Government Code and Cypher School at Bletchley Park to break the ciphers used by the Kriegsmarine U-boats in the north Atlantic Ocean. He was also interested in the encipherment of speech and to this end spent time at Bell Labs. Shannon and Turing met at teatime in the cafeteria. Turing showed Shannon his 1936 paper that defined what is now known as the \"Universal Turing machine\". This impressed Shannon, as many of its ideas complemented his own.", "The Shannon centenary, 2016, marked the life and influence of Claude Elwood Shannon on the hundredth anniversary of his birth on April 30, 1916. It was inspired in part by the Alan Turing Year. An ad hoc committee of the IEEE Information Theory Society including Christina Fragouli, R\u00fcdiger Urbanke, Michelle Effros, Lav Varshney and Sergio Verd\u00fa, coordinated worldwide events. The initiative was announced in the History Panel at the 2015 IEEE Information Theory Workshop Jerusalem and the IEEE Information Theory Society Newsletter."]}, {"page": "Cryptanalysis", "response": ["*Alan Turing", "*How Alan Turing Cracked The Enigma Code Imperial War Museums"]}, {"page": "Computer program", "response": ["In 1936, Alan Turing introduced the Universal Turing machine\u2014a theoretical device that can model every computation that can be performed on a Turing complete computing machine."]}, {"page": "Computable number", "response": ["In the following, Marvin Minsky defines the numbers to be computed in a manner similar to those defined by Alan Turing in 1936; i.e., as \"sequences of digits interpreted as decimal fractions\" between 0 and 1:"]}, {"page": "Chinese room", "response": ["The Chinese room implements a version of the Turing test. Alan Turing introduced the test in 1950 to help answer the question \"can machines think?\" In the standard version, a human judge engages in a natural language conversation with a human and a machine designed to generate performance indistinguishable from that of a human being. All participants are separated from one another. If the judge cannot reliably tell the machine from the human, the machine is said to have passed the test.", "The Chinese room has a design analogous to that of a modern computer. It has a Von Neumann architecture, which consists of a program (the book of instructions), some memory (the papers and file cabinets), a CPU that follows the instructions (the man), and a means to write symbols in memory (the pencil and eraser). A machine with this design is known in theoretical computer science as \"Turing complete\", because it has the necessary machinery to carry out any computation that a Turing machine can do, and therefore it is capable of doing a step-by-step simulation of any other digital machine, given enough memory and time. Alan Turing writes, \"all digital computers are in a sense equivalent.\" The widely accepted Church\u2013Turing thesis holds that any function computable by an effective procedure is computable by a Turing machine.", "Alan Turing anticipated Searle's line of argument (which he called \"The Argument from Consciousness\") in 1950 and makes the other minds reply. He noted that people never consider the problem of other minds when dealing with each other. He writes that \"instead of arguing continually over this point it is usual to have the polite convention that everyone thinks.\" The Turing test simply extends this \"polite convention\" to machines. He doesn't intend to solve the problem of other minds (for machines or people) and he doesn't think we need to."]}, {"page": "Colossus computer", "response": ["Colossus was designed by General Post Office (GPO) research telephone engineer Tommy Flowers to solve a problem posed by mathematician Max Newman at the Government Code and Cypher School (GC&CS) at Bletchley Park. Alan Turing's use of probability in cryptanalysis (see Banburismus) contributed to its design. It has sometimes been erroneously stated that Turing designed Colossus to aid the cryptanalysis of the Enigma. Turing's machine that helped decode Enigma was the electromechanical Bombe, not Colossus.", "In order to decrypt the transmitted messages, two tasks had to be performed. The first was \"wheel breaking\", which was the discovery of the cam patterns for all the wheels. These patterns were set up on the Lorenz machine and then used for a fixed period of time for a succession of different messages. Each transmission, which often contained more than one message, was enciphered with a different start position of the wheels. Alan Turing invented a method of wheel-breaking that became known as Turingery. Turing's technique was further developed into \"Rectangling\", for which Colossus could produce tables for manual analysis. Colossi 2, 4, 6, 7 and 9 had a \"gadget\" to aid this process.", "Tommy Flowers MBE was a senior electrical engineer and Head of the Switching Group at the Post Office Research Station at Dollis Hill. Prior to his work on Colossus, he had been involved with GC&CS at Bletchley Park from February 1941 in an attempt to improve the Bombes that were used in the cryptanalysis of the German Enigma cipher machine. He was recommended to Max Newman by Alan Turing, who had been impressed by his work on the Bombes. The main components of the Heath Robinson machine were as follows.", "A small number of people who were associated with Colossus\u2014and knew that large-scale, reliable, high-speed electronic digital computing devices were feasible\u2014played significant roles in early computer work in the UK and probably in the US. However, being so secret, it had little direct influence on the development of later computers; it was EDVAC that was the seminal computer architecture of the time. In 1972, Herman Goldstine, who was unaware of Colossus and its legacy to the projects of people such as Alan Turing (ACE), Max Newman (Manchester computers) and Harry Huskey (Bendix G-15), wrote that,"]}, {"page": "List of computer scientists", "response": ["* Alan Turing (1912\u20131954) \u2013 British computing pioneer, Turing machine, algorithms, cryptology, computer architecture"]}, {"page": "Church\u2013Turing thesis", "response": ["In computability theory, the Church\u2013Turing thesis (also known as computability thesis,Robert Soare, \"Turing Oracle Machines, Online Computing, and Three Displacements in Computability Theory\" the  Turing\u2013Church thesis, the Church\u2013Turing conjecture, Church's thesis, Church's conjecture, and Turing's thesis) is a thesis about the nature of computable functions. It states that a function on the natural numbers can be calculated by an effective method if and only if it is computable by a Turing machine. The thesis is named after American mathematician Alonzo Church and the British mathematician Alan Turing. Before the precise definition of computable function, mathematicians often used the informal term effectively calculable to describe functions that are computable by paper-and-pencil methods. In the 1930s, several independent attempts were made to formalize the notion of computability:", "* Also in 1936, before learning of Church's work, Alan Turing created a theoretical model for machines, now called Turing machines, that could carry out calculations from inputs by manipulating symbols on a tape. Given a suitable encoding of the natural numbers as sequences of symbols, a function on the natural numbers is called Turing computable if some Turing machine computes the corresponding function on encoded natural numbers.", "A hypothesis leading to a natural law?: In late 1936 Alan Turing's paper (also proving that the Entscheidungsproblem is unsolvable) was delivered orally, but had not yet appeared in print.. On the other hand, Emil Post's 1936 paper had appeared and was certified independent of Turing's work.cf. Editor's footnote to Post 1936 Finite Combinatory Process. Formulation I. at . Post strongly disagreed with Church's \"identification\" of effective computability with the \u03bb-calculus and recursion, stating:", "Kleene, finally, uses for the first time the term the \"Church-Turing thesis\" in a section in which he helps to give clarifications to concepts in Alan Turing's paper \"The Word Problem in Semi-Groups with Cancellation\", as demanded in a critique from William Boone.", "Category:Alan Turing"]}, {"page": "Clerihew", "response": ["Alan Turing, one of the founders of computing, was the subject of a clerihew written by the pupils of his alma mater, Sherborne School in England:"]}, {"page": "List of cryptographers", "response": ["* Jack Good UK, GC&CS, Bletchley Park worked with Alan Turing on the statistical approach to cryptanalysis."]}, {"page": "Computational complexity theory", "response": ["Before the actual research explicitly devoted to the complexity of algorithmic problems started off, numerous foundations were laid out by various researchers. Most influential among these was the definition of Turing machines by Alan Turing in 1936, which turned out to be a very robust and flexible simplification of a computer."]}, {"page": "Dayton, Ohio", "response": ["===Alan Turing visited NCR in Dayton, Ohio in Dec. 1942===", "Alan Turing is widely considered to be the father of theoretical computer science and artificial intelligence. He visited the National Cash Register (NCR) company in Dayton in December 1942. He was able to show that it was not necessary to build 336 Bombes, so the initial order was scaled down to 96 machines to decipher German Enigma-machine-encrypted secret messages during World War II.copied content from []; see that page's history for attribution"]}, {"page": "David Hilbert", "response": ["Nevertheless, the subsequent achievements of proof theory at the very least clarified consistency as it relates to theories of central concern to mathematicians. Hilbert's work had started logic on this course of clarification; the need to understand G\u00f6del's work then led to the development of recursion theory and then mathematical logic as an autonomous discipline in the 1930s. The basis for later theoretical computer science, in the work of Alonzo Church and Alan Turing, also grew directly out of this 'debate'."]}, {"page": "Definable real number", "response": ["A real number is a computable number if there is an algorithm that, given a natural number n, produces a decimal expansion for the number accurate to n decimal places.  This notion was introduced by Alan Turing in 1936."]}, {"page": "Discrete mathematics", "response": ["The need to break German codes in World War II led to advances in cryptography and theoretical computer science, with the first programmable digital electronic computer being developed at England's Bletchley Park with the guidance of Alan Turing and his seminal work, On Computable Numbers. At the same time, military requirements motivated advances in operations research. The Cold War meant that cryptography remained important, with fundamental advances such as public-key cryptography being developed in the following decades. Operations research remained important as a tool in business and project management, with the critical path method being developed in the 1950s. The telecommunication industry has also motivated advances in discrete mathematics, particularly in graph theory and information theory. Formal verification of statements in logic has been necessary for software development of safety-critical systems, and advances in automated theorem proving have been driven by this need."]}, {"page": "David Deutsch", "response": ["# Alan Turing's theory of computation, especially as developed in Deutsch's Turing principle, in which the Universal Turing machine is replaced by Deutsch's universal quantum computer. (\"The theory of computation is now the quantum theory of computation.\")"]}, {"page": "Douglas Hofstadter", "response": ["*Alan Turing: The Enigma by Andrew Hodges, 1983. (Preface)", "*Alan Turing: Life and Legacy of a Great Thinker by Christof Teuscher, 2003. (editor)"]}, {"page": "Enigma machine", "response": ["* Hugh Whitemore's play, Breaking the Code (1986), focuses on the life and death of Alan Turing, who was the central force in continuing to solve the Enigma code in the United Kingdom, during World War II. Turing was played by Derek Jacobi, who also played Turing in a 1996 television adaptation of the play.", "* The film The Imitation Game (2014) tells the story of Alan Turing and his attempts to crack the Enigma machine cipher during World War II.", "* Rejewski, Marian.  How Polish Mathematicians Deciphered the Enigma\", Annals of the History of Computing 3, 1981. This article is regarded by Andrew Hodges, Alan Turing's biographer, as \"the definitive account\" (see Hodges' Alan Turing: The Enigma, Walker and Company, 2000 paperback edition, p.\u00a0548, footnote 4.5)."]}, {"page": "England", "response": ["Prominent English figures from the field of science and mathematics include Sir Isaac Newton, Michael Faraday, Charles Darwin, Robert Hooke, James Prescott Joule, John Dalton, Lord Rayleigh, J. J. Thomson, James Chadwick, Charles Babbage, George Boole, Alan Turing, Tim Berners-Lee, Paul Dirac, Stephen Hawking, Peter Higgs, Roger Penrose, John Horton Conway, Thomas Bayes, Arthur Cayley, G. H. Hardy, Oliver Heaviside, Andrew Wiles, Edward Jenner, Francis Crick, Joseph Lister, Joseph Priestley, Thomas Young, Christopher Wren and Richard Dawkins. Some experts claim that the earliest concept of a metric system was invented by John Wilkins, the first secretary of the Royal Society, in 1668."]}, {"page": "Entscheidungsproblem", "response": ["In 1936, Alonzo Church and Alan Turing published independent papersChurch's paper was presented to the American Mathematical Society on 19 April 1935 and published on 15 April 1936. Turing, who had made substantial progress in writing up his own results, was disappointed to learn of Church's proof upon its publication (see correspondence between Max Newman and Church in Alonzo Church papers). Turing quickly completed his paper and rushed it to publication; it was received by the Proceedings of the London Mathematical Society on 28 May 1936, read on 12 November 1936, and published in series 2, volume 42 (1936\u20137); it appeared in two sections: in Part 3 (pages 230\u2013240), issued on 30 Nov 1936 and in Part 4 (pages 241\u2013265), issued on 23 Dec 1936; Turing added corrections in volume 43 (1937), pp. 544\u2013546. See the footnote at the end of Soare: 1996. showing that a general solution to the  is impossible, assuming that the intuitive notion of \"effectively calculable\" is captured by the functions computable by a Turing machine (or equivalently, by those expressible in the lambda calculus). This assumption is now known as the Church\u2013Turing thesis.", "Before the question could be answered, the notion of \"algorithm\" had to be formally defined.  This was done by Alonzo Church in 1935 with the concept of \"effective calculability\" based on his \u03bb-calculus and by Alan Turing the next year with his concept of Turing machines.  Turing immediately recognized that these are equivalent models of computation.", "The negative answer to the  was then given by Alonzo Church in 1935\u201336 (Church's theorem) and independently shortly thereafter by Alan Turing in 1936 (Turing's proof).  Church proved that there is no computable function which decides for two given \u03bb-calculus expressions whether they are equivalent or not. He relied heavily on earlier work by Stephen Kleene. Turing reduced the question of the existence of a 'general method' which decides whether any given Turing Machine halts or not (the halting problem) to the question of the existence of an 'algorithm' or 'general method' able to solve the . If 'Algorithm' is understood as being equivalent to a Turing Machine, and with the answer to the latter question negative (in general), the question about the existence of an Algorithm for the  also must be negative (in general). In his 1936 paper, Turing says: \"Corresponding to each computing machine 'it' we construct a formula 'Un(it)' and we show that, if there is a general method for determining whether 'Un(it)' is provable, then there is a general method for determining whether 'it' ever prints 0\".", "* Alan Turing, \"On Computable Numbers, with an Application to the Entscheidungsproblem\", Proceedings of the London Mathematical Society, Series 2, 42 (1936\u20137), pp 230\u2013265. Online versions: from journal website, from Turing Digital Archive, from abelard.org.  Errata appeared in Series 2, 43 (1937), pp 544\u2013546.", "* Andrew Hodges, Alan Turing: The Enigma, Simon and Schuster, New York, 1983. Alan M. Turing's biography. Cf Chapter \"The Spirit of Truth\" for a history leading to, and a discussion of, his proof.", "* Stephen Toulmin, \"Fall of a Genius\", a book review of \"Alan Turing: The Enigma by Andrew Hodges\", in The New York Review of Books, 19 January 1984, p.\u00a03ff."]}]}}